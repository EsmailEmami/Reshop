@model AddAuxViewModel

@{
    ViewData["Title"] = "AUX افزودن";
}
@section RightMenu
{
    @{ await Html.RenderPartialAsync("_RightMenu", RightMenuActivePage.ProductPage); }
}

@section Css{
    <link href="~/css/select.css" rel="stylesheet" />
    <link href="~/css/ckEditor.css" rel="stylesheet" />
}

<form asp-action="AddAux" method="post" enctype="multipart/form-data">

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    
    <h3 class="title-header">مشخصات کالا</h3>
    <div class="row">

        <div class="col-sm-12 col-md-6">
            <div class="form-field">
                <input type="text" asp-for="ProductTitle" />
                <label asp-for="ProductTitle"></label>
                <span asp-validation-for="ProductTitle" class="text-danger"></span>
            </div>
        </div>

        @*store titles *@
        <div class="col-sm-12 col-md-6">
            <select onchange="GetBrandsOfStoreTitle(this.value)" asp-for="SelectedStoreTitle">
                <option value="">عنوان کالا</option>

                @if (Model.StoreTitles != null)
                {
                    @foreach (var item in Model.StoreTitles)
                    {
                        @:<option value="@item.StoreTitleId" @(Model.SelectedStoreTitle == item.StoreTitleId ? "selected" : "")>@item.StoreTitleName</option>
                    }
                }
            </select>
        </div>
        @* this is for brand *@
        <div class="col-sm-12 col-lg-4">
            <select id="brand" onchange="updateSelectsOfBand(this.value)" asp-for="SelectedBrand">
                @if (Model.Brands != null)
                {
                    <option value=""> لطفا برند را انتخاب کنید</option>
                    @foreach (var item in Model.Brands)
                    {
                        @:<option value="@item.Item1" @(Model.SelectedBrand == item.Item1 ? "selected" : "")>@item.Item2</option>
                    }
                }
                else
                {
                    <option value="">لطفا عنوان کالا را انتخاب کنید</option>
                }
            </select>
        </div>
        @* this is for official product *@
        <div class="col-sm-12 col-lg-4">
            <select id="officialProduct" asp-for="OfficialBrandProductId">
                @if (Model.OfficialProducts != null)
                {
                    <option value="">لطفا نام اختصاصی کالا را انتخاب کنید</option>
                    @foreach (var item in Model.OfficialProducts)
                    {
                        @:<option value="@item.Item1" @(Model.OfficialBrandProductId == item.Item1 ? "selected" : "")>@item.Item2</option>
                    }
                }
                else
                {
                    <option value="">لطفا برند را انتخاب کنید</option>
                }
            </select>
        </div>

        @* this is for child categories *@
        <div class="col-sm-12 col-lg-4">
            <select id="childCategory" asp-for="SelectedChildCategory">
                <option>لطفا برند را انتخاب کنید</option>
                @if (Model.ChildCategories != null)
                {
                    @foreach (var item in Model.ChildCategories)
                    {
                        @:<option value="@item.ChildCategoryId" @(Model.SelectedChildCategory == item.ChildCategoryId? "selected" : "")>@item.ChildCategoryTitle - @item.IsActive.BoolToText("فعال")</option>
                    }
                }
            </select>
        </div>

        <div class="col-sm-12 mb-4">
            <textarea id="editor" asp-for="Description"> </textarea>

            <div class="word-count">
                <div id="word-count">
                    کلمه ها : 0
                </div>
                <div id="character-count">
                    کاراکتر ها : 0
                </div>
            </div>
        </div>

        <div class="col-sm-12">
            <div class="form-check">
                <label>
                    این کالا فعال است
                    <input type="checkbox" checked asp-for="IsActive">
                    <span></span>
                </label>
            </div>
        </div>
    </div>

    <h3 class="title-header">تصاویر</h3>

    <div class="row justify-content-around" id="images-part">

        <div class="col-auto">
            <div class="image-field">
                <div class="image-area">
                    <a href="javascript:void(0)" class="change-image">
                        <input type="file" name="Images" multiple class="ProfileAvatarInput" onchange="addImageToProduct(this, 'imgProduct1')">
                        <i class="far fa-camera"></i>
                    </a>
                    <img src="~/images/pattern/placeholder-image.png" alt="تصویر کالا" id="imgProduct1">
                </div>
            </div>
        </div>

    </div>




    <h3 class="title-header">مشخصات کابل AUX</h3>
    <div class="row">
        <div class="col-sm-12 col-md-6">
            <div class="form-field">
                <input type="text" asp-for="CableMaterial" />
                <label asp-for="CableLenght"></label>
                <span asp-validation-for="CableMaterial" class="text-danger"></span>
            </div>
        </div>
        <div class="col-sm-12 col-md-6">
            <div class="form-field">
                <input type="text" asp-for="CableLenght" />
                <label asp-for="CableLenght"></label>
                <span asp-validation-for="CableLenght" class="text-danger"></span>
            </div>
        </div>
    </div>
    <div class="text-center">
        <button type="submit" class="btn btn-success text-white">ثبت</button>
    </div>
</form>


@section Scripts {
    <script src="~/js/select.js"></script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script src="~/lib/CKEditor/ckeditor.js"></script>

    <script>
        function updateSelectsOfBand(brandId) {
            GetOfficialProductsOfBrand(brandId);
            GetChildCategoriesOfBrand(brandId);
        }
    </script>



    <script>
        ClassicEditor
            .create(document.querySelector('#editor'), {

                toolbar: {
                    items: [
                        'heading',
                        '|',
                        'bold',
                        'italic',
                        'link',
                        'underline',
                        'bulletedList',
                        'numberedList',
                        '|',
                        'fontFamily',
                        'fontColor',
                        'fontSize',
                        'fontBackgroundColor',
                        'highlight',
                        '|',
                        'imageUpload',
                        'imageInsert',
                        'blockQuote',
                        'insertTable',
                        'mediaEmbed',
                        'undo',
                        'redo',
                        'findAndReplace'
                    ]
                },
                language: 'fa',
                image: {
                    toolbar: [
                        'imageTextAlternative',
                        'imageStyle:inline',
                        'imageStyle:block',
                        'imageStyle:side',
                        'linkImage'
                    ]
                },
                table: {
                    contentToolbar: [
                        'tableColumn',
                        'tableRow',
                        'mergeTableCells',
                        'tableCellProperties',
                        'tableProperties'
                    ]
                },
                fileBrowserUploadUrl:'/file_upload',
                fontFamily: {
                    options: [
                        'Sahel, sans-serif'
                    ]
                },
                fontSize: {
                    options: [
                        9,
                        10,
                        11,
                        'default',
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19
                    ]
                },

            })
            .then(editor => {
                window.editor = editor;
                var wordCountPlugin = editor.plugins.get('WordCount');

                wordCountPlugin.on('update', (evt, data) => {
                    // data is an object with "words" and "characters" field
                    doSthWithNewWordsNumber(data.words);
                    doSthWithNewCharactersNumber(data.characters);
                });

            })
            .catch(error => {
                console.error(error);
            });
    </script>

    <script>
        function doSthWithNewWordsNumber(count) {
            document.getElementById('word-count').innerHTML = "کلمه ها" + count;
        }

        function doSthWithNewCharactersNumber(count) {
            document.getElementById('character-count').innerHTML = "کاراکتر ها" + count;
        }
    </script>
}