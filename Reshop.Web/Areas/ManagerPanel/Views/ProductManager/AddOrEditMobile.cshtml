@model AddOrEditMobileProductViewModel

@{
    ViewData["Title"] = Model.ProductId == 0 ? "موبایل افزودن" : "موبایل ویرایش";
}
@section RightMenu
{
    @{ await Html.RenderPartialAsync("_RightMenu", RightMenuActivePage.ProductPage); }
}

@section Css{
    <link href="~/css/select.css" rel="stylesheet" />
    <link href="~/css/ckEditor.css" rel="stylesheet" />
}

@section Scripts {
    <script src="~/js/select.js"></script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script src="~/lib/CKEditor/ckeditor.js"></script>

    <script>
        function updateSelectsOfBand(brandId) {
            GetOfficialProductsOfBrand(brandId);
            GetChildCategoriesOfBrand(brandId);
        }
    </script>



    <script>
        ClassicEditor
            .create(document.querySelector('#editor'), {

                toolbar: {
                    items: [
                        'heading',
                        '|',
                        'bold',
                        'italic',
                        'link',
                        'underline',
                        'bulletedList',
                        'numberedList',
                        '|',
                        'fontFamily',
                        'fontColor',
                        'fontSize',
                        'fontBackgroundColor',
                        'highlight',
                        '|',
                        'imageUpload',
                        'imageInsert',
                        'blockQuote',
                        'insertTable',
                        'mediaEmbed',
                        'undo',
                        'redo',
                        'findAndReplace'
                    ]
                },
                language: 'fa',
                image: {
                    toolbar: [
                        'imageTextAlternative',
                        'imageStyle:inline',
                        'imageStyle:block',
                        'imageStyle:side',
                        'linkImage'
                    ]
                },
                table: {
                    contentToolbar: [
                        'tableColumn',
                        'tableRow',
                        'mergeTableCells',
                        'tableCellProperties',
                        'tableProperties'
                    ]
                },
                fileBrowserUploadUrl:'/file_upload',
                fontFamily: {
                    options: [
                        'Sahel, sans-serif'
                    ]
                },
                fontSize: {
                    options: [
                        9,
                        10,
                        11,
                        'default',
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19
                    ]
                },

            })
            .then(editor => {
                window.editor = editor;
                var wordCountPlugin = editor.plugins.get('WordCount');

                wordCountPlugin.on('update', (evt, data) => {
                    // data is an object with "words" and "characters" field
                    doSthWithNewWordsNumber(data.words);
                    doSthWithNewCharactersNumber(data.characters);
                });

            })
            .catch(error => {
                console.error(error);
            });
    </script>

    <script>
        function doSthWithNewWordsNumber(count) {
            document.getElementById('word-count').innerHTML = "کلمه ها" + count;
        }

        function doSthWithNewCharactersNumber(count) {
            document.getElementById('character-count').innerHTML = "کاراکتر ها" + count;
        }
    </script>
}