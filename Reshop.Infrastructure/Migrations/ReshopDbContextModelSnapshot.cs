// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reshop.Infrastructure.Context;

namespace Reshop.Infrastructure.Migrations
{
    [DbContext(typeof(ReshopDbContext))]
    partial class ReshopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Reshop.Domain.Entities.Category.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Category.ChildCategory", b =>
                {
                    b.Property<int>("ChildCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChildCategoryTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ChildCategoryId");

                    b.ToTable("ChildCategories");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Category.ChildCategoryToCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ChildCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ChildCategoryId");

                    b.HasIndex("ChildCategoryId");

                    b.ToTable("ChildCategoryToCategories");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.BrandProduct", b =>
                {
                    b.Property<int>("BrandProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("BrandProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BrandProductId");

                    b.HasIndex("BrandId");

                    b.ToTable("BrandProducts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.FavoriteProduct", b =>
                {
                    b.Property<string>("FavoriteProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoriteProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllSalesCount")
                        .HasColumnType("int");

                    b.Property<int>("AllViewsCount")
                        .HasColumnType("int");

                    b.Property<int?>("BatteryChargerDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BrandProduct")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("FlashMemoryDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("HandsfreeAndHeadPhoneDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("LaptopDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("MemoryCardDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("MobileCoverDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("MobileDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("PowerBankDetailId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<string>("ProductTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<string>("ShortKey")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("SmartWatchDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("SpeakerDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("TabletDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("WristWatchDetailId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("BatteryChargerDetailId");

                    b.HasIndex("FlashMemoryDetailId");

                    b.HasIndex("HandsfreeAndHeadPhoneDetailId");

                    b.HasIndex("LaptopDetailId");

                    b.HasIndex("MemoryCardDetailId");

                    b.HasIndex("MobileCoverDetailId");

                    b.HasIndex("MobileDetailId");

                    b.HasIndex("PowerBankDetailId");

                    b.HasIndex("SmartWatchDetailId");

                    b.HasIndex("SpeakerDetailId");

                    b.HasIndex("TabletDetailId");

                    b.HasIndex("WristWatchDetailId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.BatteryChargerDetail", b =>
                {
                    b.Property<int>("BatteryChargerDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MobileCable")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("OutputCurrentIntensity")
                        .HasColumnType("float");

                    b.Property<byte>("OutputPortsCount")
                        .HasColumnType("tinyint");

                    b.HasKey("BatteryChargerDetailId");

                    b.ToTable("BatteryChargerDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.FlashMemoryDetail", b =>
                {
                    b.Property<int>("FlashDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Capacity")
                        .HasColumnType("float");

                    b.Property<string>("Connector")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsImpactResistance")
                        .HasColumnType("bit");

                    b.HasKey("FlashDetailId");

                    b.ToTable("FlashMemoryDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.HandsfreeAndHeadPhoneDetail", b =>
                {
                    b.Property<int>("HeadPhoneDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Connector")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsSupportBattery")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WorkSuggestion")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("HeadPhoneDetailId");

                    b.ToTable("HandsfreeAndHeadPhoneDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.LaptopDetail", b =>
                {
                    b.Property<int>("LaptopDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("GPUManufacturer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("InternalMemory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsHDMIPort")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMatteScreen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTouchScreen")
                        .HasColumnType("bit");

                    b.Property<string>("OperatingSystem")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProcessorSeries")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RAMCapacity")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RAMType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ScreenAccuracy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("LaptopDetailId");

                    b.ToTable("LaptopDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.MemoryCardDetail", b =>
                {
                    b.Property<int>("MemoryCardDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResistsAgainst")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpeedStandard")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MemoryCardDetailId");

                    b.ToTable("MemoryCardDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.MobileCoverDetail", b =>
                {
                    b.Property<int>("MobileCoverDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverLevel")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Structure")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SuitablePhones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("MobileCoverDetailId");

                    b.ToTable("MobileCoverDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.MobileDetail", b =>
                {
                    b.Property<int>("MobileDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackCameras")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommunicationNetworks")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DisplayTechnology")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("InternalMemory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OperatingSystem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OperatingSystemVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhotoResolution")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("QuantitySIMCard")
                        .HasColumnType("tinyint");

                    b.Property<string>("RAMValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SIMCardDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.HasKey("MobileDetailId");

                    b.ToTable("MobileDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.PowerBankDetail", b =>
                {
                    b.Property<int>("PowerBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyMaterial")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CapacityRange")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsSupportOfPDTechnology")
                        .HasMaxLength(200)
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportOfQCTechnology")
                        .HasMaxLength(200)
                        .HasColumnType("bit");

                    b.Property<double>("OutputCurrentIntensity")
                        .HasColumnType("float");

                    b.Property<byte>("OutputPortsCount")
                        .HasColumnType("tinyint");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PowerBankId");

                    b.ToTable("PowerBankDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.SmartWatchDetail", b =>
                {
                    b.Property<int>("SmartWatchDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyMaterial")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Connections")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDirectTalkable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSIMCardSupporter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScreenColorful")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuitableForMen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuitableForWomen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportGPS")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportSIMCardRegister")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTalkableWithBluetooth")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTouchScreen")
                        .HasColumnType("bit");

                    b.Property<string>("Sensors")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WatchForm")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("WorkSuggestion")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("SmartWatchDetailId");

                    b.ToTable("SmartWatchDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.SpeakerDetail", b =>
                {
                    b.Property<int>("SpeakerDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BluetoothVersion")
                        .HasColumnType("float");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Connector")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsMemoryCardInput")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportBattery")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportMicrophone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportRadio")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportUSBPort")
                        .HasColumnType("bit");

                    b.HasKey("SpeakerDetailId");

                    b.ToTable("SpeakerDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.TabletDetail", b =>
                {
                    b.Property<int>("TabletDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommunicationNetworks")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommunicationPorts")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CommunicationTechnologies")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("InternalMemory")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsSIMCardSupporter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTalkAbility")
                        .HasColumnType("bit");

                    b.Property<string>("OperatingSystemVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("QuantitySIMCard")
                        .HasMaxLength(10)
                        .HasColumnType("tinyint");

                    b.Property<string>("RAMValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("TabletDetailId");

                    b.ToTable("TabletDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.WristWatchDetail", b =>
                {
                    b.Property<int>("WristWatchDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSupportGPS")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTouchScreen")
                        .HasColumnType("bit");

                    b.Property<string>("WatchForm")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("WristWatchDetailId");

                    b.ToTable("WristWatchDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductGallery", b =>
                {
                    b.Property<string>("ProductGalleryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductGalleryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGalleries");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductToChildCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ChildCategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ChildCategoryId");

                    b.HasIndex("ChildCategoryId");

                    b.ToTable("ProductToChildCategories");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.Shopper", b =>
                {
                    b.Property<string>("ShopperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackNationalCardImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("BusinessLicenseImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Condition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LandlinePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("OnNationalCardImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterShopper")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ShopperId");

                    b.ToTable("Shoppers");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProduct", b =>
                {
                    b.Property<string>("ShopperUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SaleCount")
                        .HasColumnType("int");

                    b.Property<string>("ShopperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("ShopperUserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShopperId");

                    b.ToTable("ShopperProducts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperStoreTitle", b =>
                {
                    b.Property<string>("ShopperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StoreTitleId")
                        .HasColumnType("int");

                    b.HasKey("ShopperId", "StoreTitleId");

                    b.HasIndex("StoreTitleId");

                    b.ToTable("ShopperStoreTitles");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.StoreTitle", b =>
                {
                    b.Property<int>("StoreTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StoreTitleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StoreTitleId");

                    b.ToTable("StoreTitles");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Address", b =>
                {
                    b.Property<string>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Plaque")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CommentTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.CommentAnswer", b =>
                {
                    b.Property<int>("CommentAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentAnswerId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentAnswers");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Discount", b =>
                {
                    b.Property<string>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("DiscountPercent")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<short?>("UsableCount")
                        .HasColumnType("smallint");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Sum")
                        .HasColumnType("Money");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ShopperUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Sum")
                        .HasColumnType("Money");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShopperUserId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuestionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.QuestionAnswer", b =>
                {
                    b.Property<int>("QuestionAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionAnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("StateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.StateCity", b =>
                {
                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.HasKey("StateId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("StateCities");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.User", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AccountBalance")
                        .HasColumnType("Money");

                    b.Property<string>("ActiveCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InviteCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("InviteCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserShopper")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("ShopperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAvatar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("ShopperId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.UserDiscountCode", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiscountId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "DiscountId");

                    b.HasIndex("DiscountId");

                    b.ToTable("UserDiscountCodes");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.UserInvite", b =>
                {
                    b.Property<string>("UserInviteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvitedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InviterUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserInviteId");

                    b.HasIndex("InviterUserId");

                    b.ToTable("UserInvites");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Wallet", b =>
                {
                    b.Property<string>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WalletTypeId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletTypeId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.WalletType", b =>
                {
                    b.Property<int>("WalletTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("WalletTypeId");

                    b.ToTable("WalletTypes");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Category.ChildCategoryToCategory", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Category.Category", "Category")
                        .WithMany("ChildCategoryToCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Category.ChildCategory", "ChildCategory")
                        .WithMany("ChildCategoryToCategories")
                        .HasForeignKey("ChildCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ChildCategory");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.BrandProduct", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Brand", "Brand")
                        .WithMany("BrandProducts")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.FavoriteProduct", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Product", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.BatteryChargerDetail", "BatteryChargerDetail")
                        .WithMany()
                        .HasForeignKey("BatteryChargerDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.FlashMemoryDetail", "FlashMemoryDetail")
                        .WithMany()
                        .HasForeignKey("FlashMemoryDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.HandsfreeAndHeadPhoneDetail", "HandsfreeAndHeadPhoneDetail")
                        .WithMany()
                        .HasForeignKey("HandsfreeAndHeadPhoneDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.LaptopDetail", "LaptopDetail")
                        .WithMany()
                        .HasForeignKey("LaptopDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.MemoryCardDetail", "MemoryCardDetail")
                        .WithMany()
                        .HasForeignKey("MemoryCardDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.MobileCoverDetail", "MobileCoverDetail")
                        .WithMany()
                        .HasForeignKey("MobileCoverDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.MobileDetail", "MobileDetail")
                        .WithMany()
                        .HasForeignKey("MobileDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.PowerBankDetail", "PowerBankDetail")
                        .WithMany()
                        .HasForeignKey("PowerBankDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.SmartWatchDetail", "SmartWatchDetail")
                        .WithMany()
                        .HasForeignKey("SmartWatchDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.SpeakerDetail", "SpeakerDetail")
                        .WithMany()
                        .HasForeignKey("SpeakerDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.TabletDetail", "TabletDetail")
                        .WithMany()
                        .HasForeignKey("TabletDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.WristWatchDetail", "WristWatchDetail")
                        .WithMany()
                        .HasForeignKey("WristWatchDetailId");

                    b.Navigation("BatteryChargerDetail");

                    b.Navigation("FlashMemoryDetail");

                    b.Navigation("HandsfreeAndHeadPhoneDetail");

                    b.Navigation("LaptopDetail");

                    b.Navigation("MemoryCardDetail");

                    b.Navigation("MobileCoverDetail");

                    b.Navigation("MobileDetail");

                    b.Navigation("PowerBankDetail");

                    b.Navigation("SmartWatchDetail");

                    b.Navigation("SpeakerDetail");

                    b.Navigation("TabletDetail");

                    b.Navigation("WristWatchDetail");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductGallery", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductGalleries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductToChildCategory", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Category.ChildCategory", "ChildCategory")
                        .WithMany()
                        .HasForeignKey("ChildCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductToChildCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChildCategory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProduct", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Product", "Product")
                        .WithMany("ShopperProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Shopper.Shopper", null)
                        .WithMany("ShopperProducts")
                        .HasForeignKey("ShopperId");

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("ShopperUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperStoreTitle", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Shopper.Shopper", "Shopper")
                        .WithMany("ShopperTitles")
                        .HasForeignKey("ShopperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Shopper.StoreTitle", "StoreTitle")
                        .WithMany("ShopperTitles")
                        .HasForeignKey("StoreTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shopper");

                    b.Navigation("StoreTitle");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Address", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Comment", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.CommentAnswer", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.Comment", "Comment")
                        .WithMany("CommentAnswers")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("CommentAnswers")
                        .HasForeignKey("UserId");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Order", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.OrderDetail", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("Reshop.Domain.Entities.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("ShopperUserId");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Question", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Product", "Product")
                        .WithMany("Questions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.QuestionAnswer", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.StateCity", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.City", "City")
                        .WithMany("StateCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.State", "State")
                        .WithMany("StateCities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.User", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Shopper.Shopper", "Shopper")
                        .WithMany()
                        .HasForeignKey("ShopperId");

                    b.Navigation("Shopper");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.UserDiscountCode", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.Discount", "Discount")
                        .WithMany("UserDiscountCodes")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("UserDiscountCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.UserInvite", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("UserInvites")
                        .HasForeignKey("InviterUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.UserRole", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Wallet", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.WalletType", "WalletType")
                        .WithMany("Wallets")
                        .HasForeignKey("WalletTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Category.Category", b =>
                {
                    b.Navigation("ChildCategoryToCategories");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Category.ChildCategory", b =>
                {
                    b.Navigation("ChildCategoryToCategories");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Brand", b =>
                {
                    b.Navigation("BrandProducts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ProductGalleries");

                    b.Navigation("ProductToChildCategories");

                    b.Navigation("Questions");

                    b.Navigation("ShopperProducts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.Shopper", b =>
                {
                    b.Navigation("ShopperProducts");

                    b.Navigation("ShopperTitles");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.StoreTitle", b =>
                {
                    b.Navigation("ShopperTitles");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.City", b =>
                {
                    b.Navigation("StateCities");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Comment", b =>
                {
                    b.Navigation("CommentAnswers");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Discount", b =>
                {
                    b.Navigation("UserDiscountCodes");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Question", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.State", b =>
                {
                    b.Navigation("StateCities");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CommentAnswers");

                    b.Navigation("Comments");

                    b.Navigation("FavoriteProducts");

                    b.Navigation("Orders");

                    b.Navigation("QuestionAnswers");

                    b.Navigation("Questions");

                    b.Navigation("UserDiscountCodes");

                    b.Navigation("UserInvites");

                    b.Navigation("UserRoles");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.WalletType", b =>
                {
                    b.Navigation("Wallets");
                });
#pragma warning restore 612, 618
        }
    }
}
