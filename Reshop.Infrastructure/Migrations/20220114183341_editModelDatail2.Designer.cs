// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reshop.Infrastructure.Context;

#nullable disable

namespace Reshop.Infrastructure.Migrations
{
    [DbContext(typeof(ReshopDbContext))]
    [Migration("20220114183341_editModelDatail2")]
    partial class editModelDatail2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Reshop.Domain.Entities.Category.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Category.CategoryGallery", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderBy")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ImageName");

                    b.ToTable("CategoryGalleries");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Category.ChildCategory", b =>
                {
                    b.Property<int>("ChildCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChildCategoryId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ChildCategoryTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ChildCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ChildCategories");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Comment.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("CommentTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ConstructionQuality")
                        .HasColumnType("int");

                    b.Property<string>("DeleteDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DesignAndAppearance")
                        .HasColumnType("int");

                    b.Property<int>("FeaturesAndCapabilities")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OverallScore")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSatisfaction")
                        .HasColumnType("int");

                    b.Property<string>("ShopperProductColorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShopperProductColorId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Comment.CommentFeedback", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Type")
                        .HasColumnType("bit");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentFeedBacks");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Comment.ReportComment", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ReportCommentTypeId")
                        .HasColumnType("int");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("ReportCommentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ReportComments");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Comment.ReportCommentType", b =>
                {
                    b.Property<int>("ReportCommentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportCommentTypeId"), 1L, 1);

                    b.Property<string>("ReportCommentTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ReportCommentTypeId");

                    b.ToTable("ReportCommentTypes");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Image.Image", b =>
                {
                    b.Property<string>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ImagePlaceId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ImageId");

                    b.HasIndex("ImagePlaceId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Image.ImagePlace", b =>
                {
                    b.Property<int>("ImagePlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImagePlaceId"), 1L, 1);

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ImagePlaceId");

                    b.ToTable("ImagesPlace");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Permission.Permission", b =>
                {
                    b.Property<string>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermissionTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PermissionId");

                    b.HasIndex("ParentId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = "32757e0d-0c77-4ecd-bf82-6888acff29f1",
                            PermissionTitle = "AdminPanelMainPage"
                        },
                        new
                        {
                            PermissionId = "3a86d2a6-8582-40c9-9c70-7b8c0efac6c1",
                            PermissionTitle = "Shopper"
                        },
                        new
                        {
                            PermissionId = "fa5205e1-7395-4c3e-a464-72e84d38975a",
                            PermissionTitle = "ProductsMainPage"
                        },
                        new
                        {
                            PermissionId = "4f27c20b-e51a-4152-9e7d-a5775ab969c6",
                            ParentId = "fa5205e1-7395-4c3e-a464-72e84d38975a",
                            PermissionTitle = "AddAUX"
                        },
                        new
                        {
                            PermissionId = "5feb5422-b00a-47cd-b688-00ab6978441d",
                            ParentId = "fa5205e1-7395-4c3e-a464-72e84d38975a",
                            PermissionTitle = "EditAUX"
                        },
                        new
                        {
                            PermissionId = "d62a9faf-087d-43a3-9bbe-66ae2737a0a5",
                            ParentId = "fa5205e1-7395-4c3e-a464-72e84d38975a",
                            PermissionTitle = "ProductDetail"
                        },
                        new
                        {
                            PermissionId = "8db60935-056d-45a5-8044-a2e6e42e3edf",
                            ParentId = "d62a9faf-087d-43a3-9bbe-66ae2737a0a5",
                            PermissionTitle = "ColorDetail-Product"
                        },
                        new
                        {
                            PermissionId = "91806aaf-6e67-4b3a-9554-faac7a5454f3",
                            ParentId = "d62a9faf-087d-43a3-9bbe-66ae2737a0a5",
                            PermissionTitle = "DiscountDetail-Product"
                        },
                        new
                        {
                            PermissionId = "75a1d67a-8b13-472b-b93e-61186c41f5b2",
                            PermissionTitle = "BrandsMainPage"
                        },
                        new
                        {
                            PermissionId = "5a597555-a3ac-4c3a-8ab6-50961b43a4b6",
                            ParentId = "75a1d67a-8b13-472b-b93e-61186c41f5b2",
                            PermissionTitle = "AddBrand"
                        },
                        new
                        {
                            PermissionId = "448e89b5-b5fe-4c65-8f73-49df8a749cc0",
                            ParentId = "75a1d67a-8b13-472b-b93e-61186c41f5b2",
                            PermissionTitle = "EditBrand"
                        },
                        new
                        {
                            PermissionId = "d54aaed6-97f1-47fb-81ec-be6140c24f74",
                            ParentId = "75a1d67a-8b13-472b-b93e-61186c41f5b2",
                            PermissionTitle = "BrandDetail"
                        },
                        new
                        {
                            PermissionId = "e87bb2b0-8c05-40ec-9b48-4008eeac79be",
                            ParentId = "75a1d67a-8b13-472b-b93e-61186c41f5b2",
                            PermissionTitle = "AvailableBrand"
                        },
                        new
                        {
                            PermissionId = "c53de576-d7d5-4f62-9267-a88f17c9a952",
                            ParentId = "75a1d67a-8b13-472b-b93e-61186c41f5b2",
                            PermissionTitle = "UnAvailableBrand"
                        },
                        new
                        {
                            PermissionId = "d08d44f8-9f67-4079-b1c7-8f5bc126b66b",
                            PermissionTitle = "OfficialBrandProductsMainPage"
                        },
                        new
                        {
                            PermissionId = "6d4e2f7b-a4bc-47b1-93ac-bcf9a0b3b3f0",
                            ParentId = "d08d44f8-9f67-4079-b1c7-8f5bc126b66b",
                            PermissionTitle = "AddOfficialBrandProduct"
                        },
                        new
                        {
                            PermissionId = "526a98eb-79fd-4e54-bea8-ed7e85c0497f",
                            ParentId = "d08d44f8-9f67-4079-b1c7-8f5bc126b66b",
                            PermissionTitle = "EditOfficialBrandProduct"
                        },
                        new
                        {
                            PermissionId = "28cf0756-89f5-4a16-a5f8-64adcb095bce",
                            ParentId = "d08d44f8-9f67-4079-b1c7-8f5bc126b66b",
                            PermissionTitle = "OfficialBrandProductDetail"
                        },
                        new
                        {
                            PermissionId = "26eb15bc-b6c0-462e-8e7e-9652d56e549b",
                            ParentId = "d08d44f8-9f67-4079-b1c7-8f5bc126b66b",
                            PermissionTitle = "AvailableOfficialBrandProduct"
                        },
                        new
                        {
                            PermissionId = "c06312fc-c36c-4e12-8964-5f893eeef3cf",
                            ParentId = "d08d44f8-9f67-4079-b1c7-8f5bc126b66b",
                            PermissionTitle = "UnAvailableOfficialBrandProduct"
                        },
                        new
                        {
                            PermissionId = "8200832d-f2b6-4c7f-be15-b94592db8b0b",
                            PermissionTitle = "ColorsMainPage"
                        },
                        new
                        {
                            PermissionId = "2ce5f38d-6e9a-4de2-8fcf-dca1baf0902a",
                            ParentId = "8200832d-f2b6-4c7f-be15-b94592db8b0b",
                            PermissionTitle = "AddColor"
                        },
                        new
                        {
                            PermissionId = "5660f404-46f3-42c9-818e-e5d6a8cc514b",
                            ParentId = "8200832d-f2b6-4c7f-be15-b94592db8b0b",
                            PermissionTitle = "EditColor"
                        },
                        new
                        {
                            PermissionId = "bef2eb25-1007-40ae-b667-dcff4c4a07a9",
                            PermissionTitle = "PermissionsMainPage"
                        },
                        new
                        {
                            PermissionId = "afa3e6c4-cd57-4bed-ba82-c656bed921ff",
                            ParentId = "bef2eb25-1007-40ae-b667-dcff4c4a07a9",
                            PermissionTitle = "AddPermission"
                        },
                        new
                        {
                            PermissionId = "949826a7-070f-450a-abd8-effca32350c2",
                            ParentId = "bef2eb25-1007-40ae-b667-dcff4c4a07a9",
                            PermissionTitle = "EditPermission"
                        },
                        new
                        {
                            PermissionId = "4c516b2a-0149-4626-8d19-c2d6ac51a425",
                            ParentId = "bef2eb25-1007-40ae-b667-dcff4c4a07a9",
                            PermissionTitle = "DeletePermission"
                        },
                        new
                        {
                            PermissionId = "ec223189-ef42-41bc-b01f-6d58db051e62",
                            PermissionTitle = "RolesMainPage"
                        },
                        new
                        {
                            PermissionId = "00dd702b-1e83-4338-ae4b-3f4db4244aa5",
                            ParentId = "ec223189-ef42-41bc-b01f-6d58db051e62",
                            PermissionTitle = "AddRole"
                        },
                        new
                        {
                            PermissionId = "404efa94-c45f-4c50-ad3d-faaaf6b61807",
                            ParentId = "ec223189-ef42-41bc-b01f-6d58db051e62",
                            PermissionTitle = "EditRole"
                        },
                        new
                        {
                            PermissionId = "c154f3e4-c485-47b2-8957-6d7b177ce466",
                            ParentId = "ec223189-ef42-41bc-b01f-6d58db051e62",
                            PermissionTitle = "DeleteRole"
                        });
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Permission.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = "5fd1d3e0-b54c-4ea1-9762-80c6483fd3f8",
                            RoleTitle = "Shopper"
                        },
                        new
                        {
                            RoleId = "e9d0b742-79ff-4439-985e-bba8ae0d214d",
                            RoleTitle = "Admin"
                        },
                        new
                        {
                            RoleId = "cd2f26bd-0552-4fb0-be45-ca10741a7ab2",
                            RoleTitle = "Products Manager"
                        },
                        new
                        {
                            RoleId = "36aaf88b-d399-467c-af03-4bc902b4ac6d",
                            RoleTitle = "Add Products"
                        },
                        new
                        {
                            RoleId = "04d8adb3-f7cc-4595-b049-22d9e1fff55e",
                            RoleTitle = "Product Detail"
                        },
                        new
                        {
                            RoleId = "4b8c123d-56c2-41d0-baf9-b7794031bf80",
                            RoleTitle = "Edit Products"
                        },
                        new
                        {
                            RoleId = "2762ff27-40af-45a2-9a3a-41046597fce5",
                            RoleTitle = "Full Products Manager"
                        },
                        new
                        {
                            RoleId = "e54362db-747b-4b70-bc1f-25542d836e48",
                            RoleTitle = "Roles Manager"
                        },
                        new
                        {
                            RoleId = "84445749-e035-4bc1-9de5-146980b480a4",
                            RoleTitle = "Add Role"
                        },
                        new
                        {
                            RoleId = "c5bf460c-7906-4fd2-a33c-ebddd8afa18d",
                            RoleTitle = "Edit Role"
                        },
                        new
                        {
                            RoleId = "901ad48e-244f-4077-86fe-3d76e5495501",
                            RoleTitle = "Delete Role"
                        },
                        new
                        {
                            RoleId = "64072c6a-f55b-4cfc-a1cf-8f2a98686c36",
                            RoleTitle = "Full Role Manager"
                        },
                        new
                        {
                            RoleId = "6193141a-b2c6-4577-b1de-645f0425b8ae",
                            RoleTitle = "Permissions Manager"
                        },
                        new
                        {
                            RoleId = "5df4eefa-87e9-4bf4-bbd0-8c90ab66e9b3",
                            RoleTitle = "Add Permission"
                        },
                        new
                        {
                            RoleId = "baa40a2f-6e8e-468e-84f6-16c22865231e",
                            RoleTitle = "Edit Permission"
                        },
                        new
                        {
                            RoleId = "c3884210-cedf-4cda-8547-ab6cb30731e7",
                            RoleTitle = "Delete Permission"
                        },
                        new
                        {
                            RoleId = "211207c1-9669-4099-8955-90cba0639484",
                            RoleTitle = "Full Permission Manager"
                        });
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Permission.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = "e9d0b742-79ff-4439-985e-bba8ae0d214d",
                            PermissionId = "32757e0d-0c77-4ecd-bf82-6888acff29f1"
                        },
                        new
                        {
                            RoleId = "5fd1d3e0-b54c-4ea1-9762-80c6483fd3f8",
                            PermissionId = "3a86d2a6-8582-40c9-9c70-7b8c0efac6c1"
                        },
                        new
                        {
                            RoleId = "2762ff27-40af-45a2-9a3a-41046597fce5",
                            PermissionId = "fa5205e1-7395-4c3e-a464-72e84d38975a"
                        },
                        new
                        {
                            RoleId = "2762ff27-40af-45a2-9a3a-41046597fce5",
                            PermissionId = "4f27c20b-e51a-4152-9e7d-a5775ab969c6"
                        },
                        new
                        {
                            RoleId = "2762ff27-40af-45a2-9a3a-41046597fce5",
                            PermissionId = "5feb5422-b00a-47cd-b688-00ab6978441d"
                        },
                        new
                        {
                            RoleId = "2762ff27-40af-45a2-9a3a-41046597fce5",
                            PermissionId = "d62a9faf-087d-43a3-9bbe-66ae2737a0a5"
                        },
                        new
                        {
                            RoleId = "2762ff27-40af-45a2-9a3a-41046597fce5",
                            PermissionId = "8db60935-056d-45a5-8044-a2e6e42e3edf"
                        },
                        new
                        {
                            RoleId = "2762ff27-40af-45a2-9a3a-41046597fce5",
                            PermissionId = "91806aaf-6e67-4b3a-9554-faac7a5454f3"
                        },
                        new
                        {
                            RoleId = "64072c6a-f55b-4cfc-a1cf-8f2a98686c36",
                            PermissionId = "ec223189-ef42-41bc-b01f-6d58db051e62"
                        },
                        new
                        {
                            RoleId = "64072c6a-f55b-4cfc-a1cf-8f2a98686c36",
                            PermissionId = "00dd702b-1e83-4338-ae4b-3f4db4244aa5"
                        },
                        new
                        {
                            RoleId = "64072c6a-f55b-4cfc-a1cf-8f2a98686c36",
                            PermissionId = "404efa94-c45f-4c50-ad3d-faaaf6b61807"
                        },
                        new
                        {
                            RoleId = "64072c6a-f55b-4cfc-a1cf-8f2a98686c36",
                            PermissionId = "c154f3e4-c485-47b2-8957-6d7b177ce466"
                        },
                        new
                        {
                            RoleId = "211207c1-9669-4099-8955-90cba0639484",
                            PermissionId = "bef2eb25-1007-40ae-b667-dcff4c4a07a9"
                        },
                        new
                        {
                            RoleId = "211207c1-9669-4099-8955-90cba0639484",
                            PermissionId = "afa3e6c4-cd57-4bed-ba82-c656bed921ff"
                        },
                        new
                        {
                            RoleId = "211207c1-9669-4099-8955-90cba0639484",
                            PermissionId = "949826a7-070f-450a-abd8-effca32350c2"
                        },
                        new
                        {
                            RoleId = "211207c1-9669-4099-8955-90cba0639484",
                            PermissionId = "4c516b2a-0149-4626-8d19-c2d6ac51a425"
                        });
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Permission.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "02b75aeb-f9a1-4dbc-bf69-4c65cc29ec31",
                            RoleId = "5fd1d3e0-b54c-4ea1-9762-80c6483fd3f8"
                        },
                        new
                        {
                            UserId = "02b75aeb-f9a1-4dbc-bf69-4c65cc29ec31",
                            RoleId = "e9d0b742-79ff-4439-985e-bba8ae0d214d"
                        });
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LatinBrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StoreTitleId")
                        .HasColumnType("int");

                    b.HasKey("BrandId");

                    b.HasIndex("StoreTitleId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.BrandToChildCategory", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("ChildCategoryId")
                        .HasColumnType("int");

                    b.HasKey("BrandId", "ChildCategoryId");

                    b.HasIndex("ChildCategoryId");

                    b.ToTable("BrandToChildCategories");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"), 1L, 1);

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.FavoriteProduct", b =>
                {
                    b.Property<string>("FavoriteProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShopperProductColorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoriteProductId");

                    b.HasIndex("ShopperProductColorId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.OfficialBrandProduct", b =>
                {
                    b.Property<int>("OfficialBrandProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficialBrandProductId"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LatinOfficialBrandProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OfficialBrandProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OfficialBrandProductId");

                    b.HasIndex("BrandId");

                    b.ToTable("OfficialBrandProducts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Options.Chipset", b =>
                {
                    b.Property<string>("ChipsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChipsetName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ChipsetId");

                    b.ToTable("Chipsets");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Options.Cpu", b =>
                {
                    b.Property<string>("CpuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChipsetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CpuName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CpuId");

                    b.HasIndex("ChipsetId");

                    b.ToTable("Cpus");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Options.CpuArch", b =>
                {
                    b.Property<string>("CpuArchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CpuArchName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CpuArchId");

                    b.ToTable("CpuArches");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Options.Gpu", b =>
                {
                    b.Property<string>("GpuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChipsetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GpuName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("GpuId");

                    b.HasIndex("ChipsetId");

                    b.ToTable("Gpus");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Options.OperatingSystem", b =>
                {
                    b.Property<string>("OperatingSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperatingSystemName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("OperatingSystemId");

                    b.ToTable("OperatingSystems");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Options.OperatingSystemVersion", b =>
                {
                    b.Property<string>("OperatingSystemVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperatingSystemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperatingSystemVersionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OperatingSystemVersionId");

                    b.HasIndex("OperatingSystemId");

                    b.ToTable("OperatingSystemVersions");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int?>("AuxDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("BatteryChargerDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ChildCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FlashMemoryDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("HandsfreeAndHeadPhoneDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LaptopDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("MemoryCardDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("MobileCoverDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("MobileDetailId")
                        .HasColumnType("int");

                    b.Property<int>("OfficialBrandProductId")
                        .HasColumnType("int");

                    b.Property<int?>("PowerBankDetailId")
                        .HasColumnType("int");

                    b.Property<string>("ProductTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("SmartWatchDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("SpeakerDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("TabletDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("WristWatchDetailId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("AuxDetailId");

                    b.HasIndex("BatteryChargerDetailId");

                    b.HasIndex("ChildCategoryId");

                    b.HasIndex("FlashMemoryDetailId");

                    b.HasIndex("HandsfreeAndHeadPhoneDetailId");

                    b.HasIndex("LaptopDetailId");

                    b.HasIndex("MemoryCardDetailId");

                    b.HasIndex("MobileCoverDetailId");

                    b.HasIndex("MobileDetailId");

                    b.HasIndex("OfficialBrandProductId");

                    b.HasIndex("PowerBankDetailId");

                    b.HasIndex("SmartWatchDetailId");

                    b.HasIndex("SpeakerDetailId");

                    b.HasIndex("TabletDetailId");

                    b.HasIndex("WristWatchDetailId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.AUXDetail", b =>
                {
                    b.Property<int>("AUXDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AUXDetailId"), 1L, 1);

                    b.Property<int>("CableLenght")
                        .HasColumnType("int");

                    b.Property<string>("CableMaterial")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AUXDetailId");

                    b.ToTable("AuxDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.BatteryChargerDetail", b =>
                {
                    b.Property<int>("BatteryChargerDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatteryChargerDetailId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("InputVoltage")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Lenght")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MobileCable")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MoreInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OutputCurrentIntensity")
                        .HasColumnType("float");

                    b.Property<byte>("OutputPortsCount")
                        .HasColumnType("tinyint");

                    b.Property<string>("OutputTypeCharger")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OutputVoltage")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("BatteryChargerDetailId");

                    b.ToTable("BatteryChargerDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.FlashMemoryDetail", b =>
                {
                    b.Property<int>("FlashDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlashDetailId"), 1L, 1);

                    b.Property<bool>("AntiScratch")
                        .HasColumnType("bit");

                    b.Property<bool>("AntiStain")
                        .HasColumnType("bit");

                    b.Property<string>("BodyMaterial")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Connector")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("DustResistance")
                        .HasColumnType("bit");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsImpactResistance")
                        .HasColumnType("bit");

                    b.Property<bool>("Led")
                        .HasColumnType("bit");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MoreInformation")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("OsCompatibility")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("ShockResistance")
                        .HasColumnType("bit");

                    b.Property<string>("SpeedDataReading")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SpeedDataTransfer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("WaterResistance")
                        .HasColumnType("bit");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("FlashDetailId");

                    b.ToTable("FlashMemoryDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.HandsfreeAndHeadPhoneDetail", b =>
                {
                    b.Property<int>("HeadPhoneDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HeadPhoneDetailId"), 1L, 1);

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Connector")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsSupportBattery")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WorkSuggestion")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("HeadPhoneDetailId");

                    b.ToTable("HandsfreeAndHeadPhoneDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.LaptopDetail", b =>
                {
                    b.Property<int>("LaptopDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LaptopDetailId"), 1L, 1);

                    b.Property<bool>("BacklightKey")
                        .HasColumnType("bit");

                    b.Property<string>("BatteryCharging")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BatteryInformation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BatteryMaterial")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Bluetooth")
                        .HasColumnType("bit");

                    b.Property<bool>("BlurDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("CpuCache")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CpuCompany")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CpuFerequancy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CpuModel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CpuSeries")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("DiskDrive")
                        .HasColumnType("bit");

                    b.Property<bool>("DisplayPort")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayResolutation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplaySize")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DisplayTeachnology")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("FingerTouch")
                        .HasColumnType("bit");

                    b.Property<string>("GpuCompany")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("GpuModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GpuRam")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("HtmiPort")
                        .HasColumnType("bit");

                    b.Property<bool>("LanPort")
                        .HasColumnType("bit");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModemInformation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Os")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RamStorage")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("RamStorageTeachnology")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RefreshDisplay")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<int>("Storage")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("StorageInformation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StorageTeachnology")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TouchDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("TouchPadInformation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Usb3Port")
                        .HasColumnType("bit");

                    b.Property<int>("Usb3Quantity")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<bool>("UsbCPort")
                        .HasColumnType("bit");

                    b.Property<int>("UsbCQuantity")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<int>("UsbQuantity")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<bool>("VgaPort")
                        .HasColumnType("bit");

                    b.Property<bool>("Webcam")
                        .HasColumnType("bit");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Wifi")
                        .HasColumnType("bit");

                    b.HasKey("LaptopDetailId");

                    b.ToTable("LaptopDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.MemoryCardDetail", b =>
                {
                    b.Property<int>("MemoryCardDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemoryCardDetailId"), 1L, 1);

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MoreInformation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ReadingSpeed")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("ResistsAgainst")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SpeedStandard")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MemoryCardDetailId");

                    b.ToTable("MemoryCardDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.MobileCoverDetail", b =>
                {
                    b.Property<int>("MobileCoverDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MobileCoverDetailId"), 1L, 1);

                    b.Property<string>("CoverLevel")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Structure")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SuitablePhones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("MobileCoverDetailId");

                    b.ToTable("MobileCoverDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.MobileDetail", b =>
                {
                    b.Property<int>("MobileDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MobileDetailId"), 1L, 1);

                    b.Property<DateTime>("Announced")
                        .HasColumnType("datetime2");

                    b.Property<string>("AudioMoreInformation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("BatteryCapacity")
                        .HasColumnType("int");

                    b.Property<string>("BatteryMaterial")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Bluetooth")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("CameraCapabilities")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CameraMoreInformation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Cameras")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ChipsetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ColorDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("CommunicationTechnology")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConnectionPort")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("ConnectionsMoreInformation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConnectionsNetwork")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CpuAndFrequency")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CpuArchId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CpuId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepthCameraCapabilities")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DepthCameraResolution")
                        .HasColumnType("int");

                    b.Property<string>("DepthCameraVideo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DisplayMoreInformation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayProtection")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("DisplaySize")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("DisplayTechnology")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FiveGNetwork")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("GpsInformation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GpuId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GsmNetwork")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HspaNetwork")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageRatio")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int>("InternalStorage")
                        .HasColumnType("int");

                    b.Property<string>("ItemsInBox")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LteNetwork")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MacroCameraCapabilities")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MacroCameraResolution")
                        .HasColumnType("int");

                    b.Property<string>("MacroCameraVideo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OperatingSystemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperatingSystemVersionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OutputAudio")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhotoCameraVideo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PhotoResolution")
                        .HasColumnType("int");

                    b.Property<string>("PixelDensity")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<bool>("Radio")
                        .HasColumnType("bit");

                    b.Property<int>("Ram")
                        .HasColumnType("int");

                    b.Property<bool>("RemovableBattery")
                        .HasColumnType("bit");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ScreenToBodyRatio")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("SdCard")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SdCardStandard")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SelfiCameraCapabilities")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SelfiCameraResolution")
                        .HasColumnType("int");

                    b.Property<string>("SelfiCameraVideo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Sensors")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("SeparateSlotMemoryCard")
                        .HasColumnType("bit");

                    b.Property<string>("SimCardInput")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SimCardQuantity")
                        .HasColumnType("int");

                    b.Property<string>("SoftWareMoreInformation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Speakers")
                        .HasColumnType("bit");

                    b.Property<bool>("TouchDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("UiVersion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WiFi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WideCameraCapabilities")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("WideCameraResolution")
                        .HasColumnType("int");

                    b.Property<string>("WideCameraVideo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("MobileDetailId");

                    b.HasIndex("ChipsetId");

                    b.HasIndex("CpuArchId");

                    b.HasIndex("CpuId");

                    b.HasIndex("GpuId");

                    b.HasIndex("OperatingSystemId");

                    b.HasIndex("OperatingSystemVersionId");

                    b.ToTable("MobileDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.PowerBankDetail", b =>
                {
                    b.Property<int>("PowerBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PowerBankId"), 1L, 1);

                    b.Property<string>("BodyMaterial")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CapacityRange")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DisplayCharge")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("InputCurrentIntensity")
                        .HasColumnType("float");

                    b.Property<double>("InputVoltage")
                        .HasColumnType("float");

                    b.Property<bool>("IsSupportOfPDTechnology")
                        .HasMaxLength(200)
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportOfQCTechnology")
                        .HasMaxLength(200)
                        .HasColumnType("bit");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("OutputCurrentIntensity")
                        .HasColumnType("float");

                    b.Property<int>("OutputPortsCount")
                        .HasColumnType("int");

                    b.Property<double>("OutputVoltage")
                        .HasColumnType("float");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PowerBankId");

                    b.ToTable("PowerBankDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.SmartWatchDetail", b =>
                {
                    b.Property<int>("SmartWatchDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SmartWatchDetailId"), 1L, 1);

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("BatteryMaterial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("CallIsSoppurt")
                        .HasMaxLength(50)
                        .HasColumnType("bit");

                    b.Property<bool>("Camera")
                        .HasColumnType("bit");

                    b.Property<string>("CaseMaterial")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("ColorDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("Compatibility")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Connections")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DisplayForm")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("DisplaySize")
                        .HasMaxLength(8)
                        .HasColumnType("float");

                    b.Property<string>("DisplayType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("ExternalStorageSoppurt")
                        .HasColumnType("bit");

                    b.Property<string>("GlassMaterial")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("GpsIsSoppurt")
                        .HasColumnType("bit");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("InternalStorage")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Lenght")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MaterialStrap")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MoreInformationDisplay")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MoreInformationHardware")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MusicControl")
                        .HasColumnType("bit");

                    b.Property<string>("Os")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PixelDensity")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Prossecor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("RegisteredSimCardIsSoppurt")
                        .HasColumnType("bit");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Sensors")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("SimcardIsSoppurt")
                        .HasColumnType("bit");

                    b.Property<string>("SuitableFor")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("TouchDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("TypeOfLock")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Weight")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SmartWatchDetailId");

                    b.ToTable("SmartWatchDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.SpeakerDetail", b =>
                {
                    b.Property<int>("SpeakerDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeakerDetailId"), 1L, 1);

                    b.Property<bool>("Bluetooth")
                        .HasColumnType("bit");

                    b.Property<string>("ChargingTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ConnectTwoDevice")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Connector")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("ControlRemote")
                        .HasColumnType("bit");

                    b.Property<bool>("Display")
                        .HasColumnType("bit");

                    b.Property<bool>("HeadphoneOutput")
                        .HasColumnType("bit");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("InputSound")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBattery")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMemoryCardInput")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportMicrophone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportRadio")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportUSBPort")
                        .HasColumnType("bit");

                    b.Property<string>("Lenght")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("MicrophoneInpute")
                        .HasColumnType("bit");

                    b.Property<string>("OsSoppurt")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PlayingTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SpeakerItemQuantity")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SpeakerDetailId");

                    b.ToTable("SpeakerDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.TabletDetail", b =>
                {
                    b.Property<int>("TabletDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TabletDetailId"), 1L, 1);

                    b.Property<string>("Announced")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AudioInformation")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("BatteryCapacity")
                        .HasMaxLength(6)
                        .HasColumnType("int");

                    b.Property<string>("BatteryMaterial")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Bluetooth")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("Call")
                        .HasColumnType("bit");

                    b.Property<string>("CameraCapabilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CameraQuantity")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<string>("ChipsetName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("ColorDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("CommunicationTechnology")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConnectionPort")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("ConnectionsNetwork")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Cpu")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CpuAndFrequency")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CpuArch")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("DisplayProtection")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("DisplaySize")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("DisplayTechnology")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Filming")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FiveGNetwork")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("GpsInformation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gpu")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("GsmNetwork")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HspaNetwork")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageRatio")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int>("InternalStorage")
                        .HasMaxLength(40)
                        .HasColumnType("int");

                    b.Property<string>("ItemsInBox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lenght")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LteNetwork")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MoreInformation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MoreInformationSoftWare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("OsVersion")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("OutputAudio")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PhotoResolutation")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<string>("PixelDensity")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Radio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Ram")
                        .HasMaxLength(40)
                        .HasColumnType("int");

                    b.Property<bool>("RemovableBattery")
                        .HasMaxLength(6)
                        .HasColumnType("bit");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ScreenToBodyRatio")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("SdCard")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SdCardStandard")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SelfiCameraCapabilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SelfiCameraPhoto")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<string>("Sensors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SeparateSlotMemoryCard")
                        .HasColumnType("bit");

                    b.Property<string>("SimCardInpute")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("SimCardIsTrue")
                        .HasColumnType("bit");

                    b.Property<int>("SimCardQuantity")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<bool>("Speakers")
                        .HasColumnType("bit");

                    b.Property<bool>("TouchDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("UiVersion")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WiFi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TabletDetailId");

                    b.ToTable("TabletDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.WristWatchDetail", b =>
                {
                    b.Property<int>("WristWatchDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WristWatchDetailId"), 1L, 1);

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("BatteryCapacity")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("BatteryMaterial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BattryChargingS")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Compatibility")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Connection")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DisplayForm")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("DisplaySize")
                        .HasMaxLength(8)
                        .HasColumnType("float");

                    b.Property<string>("DisplayType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GPS")
                        .HasColumnType("bit");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Lenght")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MaterialStrap")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MoreInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PixelDensity")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Prossesor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Resists")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Sensors")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SuitableFor")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("TouchDisplay")
                        .HasColumnType("bit");

                    b.Property<string>("TypeOfLock")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Weight")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("WristWatchDetailId");

                    b.ToTable("WristWatchDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductGallery", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderBy")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ImageName");

                    b.ToTable("ProductGalleries");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"), 1L, 1);

                    b.Property<string>("DeleteDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuestionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.QuestionAnswer", b =>
                {
                    b.Property<int>("QuestionAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionAnswerId"), 1L, 1);

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DeleteDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("QuestionAnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionAnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.QuestionAnswerLike", b =>
                {
                    b.Property<int>("QuestionAnswerId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionAnswerId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionAnswerLikes");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.QuestionLike", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionLikes");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.ReportQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ReportQuestionTypeId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId", "UserId");

                    b.HasIndex("ReportQuestionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionReports");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.ReportQuestionAnswer", b =>
                {
                    b.Property<int>("QuestionAnswerId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ReportQuestionAnswerTypeId")
                        .HasColumnType("int");

                    b.HasKey("QuestionAnswerId", "UserId");

                    b.HasIndex("ReportQuestionAnswerTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionAnswerReports");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.ReportQuestionAnswerType", b =>
                {
                    b.Property<int>("ReportQuestionAnswerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportQuestionAnswerTypeId"), 1L, 1);

                    b.Property<string>("ReportQuestionAnswerTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ReportQuestionAnswerTypeId");

                    b.ToTable("ReportQuestionAnswerTypes");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.ReportQuestionType", b =>
                {
                    b.Property<int>("ReportQuestionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportQuestionTypeId"), 1L, 1);

                    b.Property<string>("ReportQuestionTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ReportQuestionTypeId");

                    b.ToTable("ReportQuestionTypes");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.Shopper", b =>
                {
                    b.Property<string>("ShopperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("BusinessLicenseImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OnNationalCardImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisterShopper")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShopperId");

                    b.HasIndex("UserId");

                    b.ToTable("Shoppers");

                    b.HasData(
                        new
                        {
                            ShopperId = "1939fee6-2a0d-4560-84aa-e7cb585bc3fb",
                            BirthDay = new DateTime(2000, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BusinessLicenseImageName = "",
                            IsActive = true,
                            OnNationalCardImageName = "",
                            RegisterShopper = new DateTime(2021, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StoreName = "فروشگاه پیش فرض",
                            UserId = "02b75aeb-f9a1-4dbc-bf69-4c65cc29ec31"
                        });
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProduct", b =>
                {
                    b.Property<string>("ShopperProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinally")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ShopperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Warranty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ShopperProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShopperId");

                    b.ToTable("ShopperProducts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProductColor", b =>
                {
                    b.Property<string>("ShopperProductColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinally")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<int>("SaleCount")
                        .HasColumnType("int");

                    b.Property<string>("ShopperProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShortKey")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("ShopperProductColorId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ShopperProductId");

                    b.ToTable("ShopperProductColors");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProductColorRequest", b =>
                {
                    b.Property<string>("ShopperProductColorRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequestType")
                        .HasColumnType("bit");

                    b.Property<string>("RequestUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShopperProductId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShopperProductColorRequestId");

                    b.HasIndex("ColorId");

                    b.HasIndex("RequestUserId");

                    b.HasIndex("ShopperProductId");

                    b.ToTable("ShopperProductColorRequests");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProductDiscount", b =>
                {
                    b.Property<string>("ShopperProductDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("DiscountPercent")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShopperProductColorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ShopperProductDiscountId");

                    b.HasIndex("ShopperProductColorId");

                    b.ToTable("ShopperProductDiscounts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProductRequest", b =>
                {
                    b.Property<string>("ShopperProductRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequestType")
                        .HasColumnType("bit");

                    b.Property<string>("RequestUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShopperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Warranty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ShopperProductRequestId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RequestUserId");

                    b.HasIndex("ShopperId");

                    b.ToTable("ShopperProductRequests");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperStoreTitle", b =>
                {
                    b.Property<string>("ShopperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StoreTitleId")
                        .HasColumnType("int");

                    b.HasKey("ShopperId", "StoreTitleId");

                    b.HasIndex("StoreTitleId");

                    b.ToTable("ShopperStoreTitles");

                    b.HasData(
                        new
                        {
                            ShopperId = "1939fee6-2a0d-4560-84aa-e7cb585bc3fb",
                            StoreTitleId = 1
                        });
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.StoreAddress", b =>
                {
                    b.Property<string>("StoreAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("LandlinePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Plaque")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ShopperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StoreAddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("ShopperId");

                    b.ToTable("StoresAddress");

                    b.HasData(
                        new
                        {
                            StoreAddressId = "662e11d3-5e67-41a3-9a2c-f45bad122178",
                            AddressText = "کمالشهر",
                            CityId = 1,
                            LandlinePhoneNumber = "1212121212",
                            Plaque = "14",
                            PostalCode = "1212121212",
                            ShopperId = "1939fee6-2a0d-4560-84aa-e7cb585bc3fb",
                            StoreName = "فروشگاه پیش فرض"
                        });
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.StoreTitle", b =>
                {
                    b.Property<int>("StoreTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreTitleId"), 1L, 1);

                    b.Property<string>("StoreTitleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StoreTitleId");

                    b.ToTable("StoreTitles");

                    b.HasData(
                        new
                        {
                            StoreTitleId = 1,
                            StoreTitleName = "کالای دیجیتال"
                        });
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Address", b =>
                {
                    b.Property<string>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Plaque")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "کمالشهر",
                            StateId = 1
                        });
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Discount", b =>
                {
                    b.Property<string>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("DiscountPercent")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<short?>("UsableCount")
                        .HasColumnType("smallint");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<string>("OrderAddressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("OrderDiscount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("Money");

                    b.Property<decimal>("Sum")
                        .HasColumnType("Money");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("OrderAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.OrderAddress", b =>
                {
                    b.Property<string>("OrderAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Plaque")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("OrderAddressId");

                    b.HasIndex("CityId");

                    b.ToTable("OrderAddresses");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<decimal>("ProductDiscountPrice")
                        .HasColumnType("Money");

                    b.Property<string>("ShopperProductColorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Sum")
                        .HasColumnType("Money");

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShopperProductColorId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"), 1L, 1);

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("StateId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            StateId = 1,
                            StateName = "البرز"
                        });
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.User", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AccountBalance")
                        .HasColumnType("Money");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("InviteCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("InviteCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UserAvatar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "02b75aeb-f9a1-4dbc-bf69-4c65cc29ec31",
                            AccountBalance = 0m,
                            Email = "esmailemami84@gmail.com",
                            FullName = "کاربر پیش فرض",
                            InviteCode = "6D9698E6D85B4BA3AD0FC1F6B0DDD00F",
                            InviteCount = 0,
                            IsBlocked = false,
                            NationalCode = "1111111111",
                            Password = "a?3#?B9?8??F#?",
                            PhoneNumber = "09903669556",
                            RegisterDate = new DateTime(2021, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Score = 0,
                            UserAvatar = "userAvatar.jpg"
                        });
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.UserDiscountCode", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiscountId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "DiscountId");

                    b.HasIndex("DiscountId");

                    b.ToTable("UserDiscountCodes");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.UserInvite", b =>
                {
                    b.Property<string>("UserInviteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InvitedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InviterUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserInviteId");

                    b.HasIndex("InviterUserId");

                    b.ToTable("UserInvites");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Wallet", b =>
                {
                    b.Property<string>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WalletTypeId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletTypeId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.WalletType", b =>
                {
                    b.Property<int>("WalletTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("WalletTypeId");

                    b.ToTable("WalletTypes");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Category.CategoryGallery", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Category.Category", "Category")
                        .WithMany("CategoryGalleries")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Category.ChildCategory", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Category.Category", "Category")
                        .WithMany("ChildCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Comment.Comment", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Shopper.ShopperProductColor", "ShopperProductColor")
                        .WithMany("Comments")
                        .HasForeignKey("ShopperProductColorId");

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("ShopperProductColor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Comment.CommentFeedback", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Comment.Comment", "Comment")
                        .WithMany("CommentFeedBacks")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("CommentFeedBacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Comment.ReportComment", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Comment.Comment", "Comment")
                        .WithMany("ReportComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Comment.ReportCommentType", "ReportCommentType")
                        .WithMany()
                        .HasForeignKey("ReportCommentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("ReportComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("ReportCommentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Image.Image", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Image.ImagePlace", "ImagePlace")
                        .WithMany("Images")
                        .HasForeignKey("ImagePlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImagePlace");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Permission.Permission", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Permission.Permission", null)
                        .WithMany("Permissions")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Permission.RolePermission", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Permission.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Permission.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Permission.UserRole", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Permission.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Brand", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Shopper.StoreTitle", "StoreTitle")
                        .WithMany("Brands")
                        .HasForeignKey("StoreTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreTitle");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.BrandToChildCategory", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Brand", "Brand")
                        .WithMany("BrandToChildCategories")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Category.ChildCategory", "ChildCategory")
                        .WithMany("BrandToChildCategories")
                        .HasForeignKey("ChildCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ChildCategory");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.FavoriteProduct", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Shopper.ShopperProductColor", "ShopperProductColor")
                        .WithMany()
                        .HasForeignKey("ShopperProductColorId");

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("UserId");

                    b.Navigation("ShopperProductColor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.OfficialBrandProduct", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Brand", "Brand")
                        .WithMany("OfficialBrandProducts")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Options.Cpu", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Options.Chipset", "Chipset")
                        .WithMany("Cpus")
                        .HasForeignKey("ChipsetId");

                    b.Navigation("Chipset");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Options.Gpu", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Options.Chipset", "Chipset")
                        .WithMany("Gpus")
                        .HasForeignKey("ChipsetId");

                    b.Navigation("Chipset");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Options.OperatingSystemVersion", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Options.OperatingSystem", "OperatingSystem")
                        .WithMany("OperatingSystemVersions")
                        .HasForeignKey("OperatingSystemId");

                    b.Navigation("OperatingSystem");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Product", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.AUXDetail", "AuxDetail")
                        .WithMany()
                        .HasForeignKey("AuxDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.BatteryChargerDetail", "BatteryChargerDetail")
                        .WithMany()
                        .HasForeignKey("BatteryChargerDetailId");

                    b.HasOne("Reshop.Domain.Entities.Category.ChildCategory", "ChildCategory")
                        .WithMany("Products")
                        .HasForeignKey("ChildCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.FlashMemoryDetail", "FlashMemoryDetail")
                        .WithMany()
                        .HasForeignKey("FlashMemoryDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.HandsfreeAndHeadPhoneDetail", "HandsfreeAndHeadPhoneDetail")
                        .WithMany()
                        .HasForeignKey("HandsfreeAndHeadPhoneDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.LaptopDetail", "LaptopDetail")
                        .WithMany()
                        .HasForeignKey("LaptopDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.MemoryCardDetail", "MemoryCardDetail")
                        .WithMany()
                        .HasForeignKey("MemoryCardDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.MobileCoverDetail", "MobileCoverDetail")
                        .WithMany()
                        .HasForeignKey("MobileCoverDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.MobileDetail", "MobileDetail")
                        .WithMany()
                        .HasForeignKey("MobileDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.OfficialBrandProduct", "OfficialBrandProduct")
                        .WithMany("Products")
                        .HasForeignKey("OfficialBrandProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.PowerBankDetail", "PowerBankDetail")
                        .WithMany()
                        .HasForeignKey("PowerBankDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.SmartWatchDetail", "SmartWatchDetail")
                        .WithMany()
                        .HasForeignKey("SmartWatchDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.SpeakerDetail", "SpeakerDetail")
                        .WithMany()
                        .HasForeignKey("SpeakerDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.TabletDetail", "TabletDetail")
                        .WithMany()
                        .HasForeignKey("TabletDetailId");

                    b.HasOne("Reshop.Domain.Entities.Product.ProductDetail.WristWatchDetail", "WristWatchDetail")
                        .WithMany()
                        .HasForeignKey("WristWatchDetailId");

                    b.Navigation("AuxDetail");

                    b.Navigation("BatteryChargerDetail");

                    b.Navigation("ChildCategory");

                    b.Navigation("FlashMemoryDetail");

                    b.Navigation("HandsfreeAndHeadPhoneDetail");

                    b.Navigation("LaptopDetail");

                    b.Navigation("MemoryCardDetail");

                    b.Navigation("MobileCoverDetail");

                    b.Navigation("MobileDetail");

                    b.Navigation("OfficialBrandProduct");

                    b.Navigation("PowerBankDetail");

                    b.Navigation("SmartWatchDetail");

                    b.Navigation("SpeakerDetail");

                    b.Navigation("TabletDetail");

                    b.Navigation("WristWatchDetail");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductDetail.MobileDetail", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Options.Chipset", "Chipset")
                        .WithMany()
                        .HasForeignKey("ChipsetId");

                    b.HasOne("Reshop.Domain.Entities.Product.Options.CpuArch", "CpuArch")
                        .WithMany()
                        .HasForeignKey("CpuArchId");

                    b.HasOne("Reshop.Domain.Entities.Product.Options.Cpu", "Cpu")
                        .WithMany()
                        .HasForeignKey("CpuId");

                    b.HasOne("Reshop.Domain.Entities.Product.Options.Gpu", "Gpu")
                        .WithMany()
                        .HasForeignKey("GpuId");

                    b.HasOne("Reshop.Domain.Entities.Product.Options.OperatingSystem", "OperatingSystem")
                        .WithMany()
                        .HasForeignKey("OperatingSystemId");

                    b.HasOne("Reshop.Domain.Entities.Product.Options.OperatingSystemVersion", "OperatingSystemVersion")
                        .WithMany()
                        .HasForeignKey("OperatingSystemVersionId");

                    b.Navigation("Chipset");

                    b.Navigation("Cpu");

                    b.Navigation("CpuArch");

                    b.Navigation("Gpu");

                    b.Navigation("OperatingSystem");

                    b.Navigation("OperatingSystemVersion");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.ProductGallery", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductGalleries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.Question", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Product", "Product")
                        .WithMany("Questions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.QuestionAnswer", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Question.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.QuestionAnswerLike", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Question.QuestionAnswer", "QuestionAnswer")
                        .WithMany("QuestionAnswerLikes")
                        .HasForeignKey("QuestionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("QuestionAnswerLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionAnswer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.QuestionLike", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Question.Question", "Question")
                        .WithMany("QuestionLikes")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("QuestionLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.ReportQuestion", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Question.Question", "Question")
                        .WithMany("QuestionReports")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Question.ReportQuestionType", "ReportQuestionType")
                        .WithMany()
                        .HasForeignKey("ReportQuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("QuestionReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("ReportQuestionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.ReportQuestionAnswer", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Question.QuestionAnswer", "QuestionAnswer")
                        .WithMany("Reports")
                        .HasForeignKey("QuestionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Question.ReportQuestionAnswerType", "ReportQuestionAnswerType")
                        .WithMany()
                        .HasForeignKey("ReportQuestionAnswerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("QuestionAnswerReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionAnswer");

                    b.Navigation("ReportQuestionAnswerType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.Shopper", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProduct", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Product", "Product")
                        .WithMany("ShopperProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Shopper.Shopper", "Shopper")
                        .WithMany("ShopperProducts")
                        .HasForeignKey("ShopperId");

                    b.Navigation("Product");

                    b.Navigation("Shopper");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProductColor", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Shopper.ShopperProduct", "ShopperProduct")
                        .WithMany("ShopperProductColors")
                        .HasForeignKey("ShopperProductId");

                    b.Navigation("Color");

                    b.Navigation("ShopperProduct");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProductColorRequest", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("RequestUserId");

                    b.HasOne("Reshop.Domain.Entities.Shopper.ShopperProduct", "ShopperProduct")
                        .WithMany()
                        .HasForeignKey("ShopperProductId");

                    b.Navigation("Color");

                    b.Navigation("ShopperProduct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProductDiscount", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Shopper.ShopperProductColor", "ShopperProductColor")
                        .WithMany("Discounts")
                        .HasForeignKey("ShopperProductColorId");

                    b.Navigation("ShopperProductColor");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProductRequest", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("RequestUserId");

                    b.HasOne("Reshop.Domain.Entities.Shopper.Shopper", "Shopper")
                        .WithMany("ShopperProductRequests")
                        .HasForeignKey("ShopperId");

                    b.Navigation("Product");

                    b.Navigation("Shopper");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperStoreTitle", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.Shopper.Shopper", "Shopper")
                        .WithMany("ShopperTitles")
                        .HasForeignKey("ShopperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Shopper.StoreTitle", "StoreTitle")
                        .WithMany("ShopperTitles")
                        .HasForeignKey("StoreTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shopper");

                    b.Navigation("StoreTitle");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.StoreAddress", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.Shopper.Shopper", "Shopper")
                        .WithMany("StoresAddress")
                        .HasForeignKey("ShopperId");

                    b.Navigation("City");

                    b.Navigation("Shopper");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Address", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.City", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Order", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.OrderAddress", "OrderAddress")
                        .WithMany()
                        .HasForeignKey("OrderAddressId");

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("OrderAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.OrderAddress", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.OrderDetail", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("Reshop.Domain.Entities.Shopper.ShopperProductColor", "ShopperProductColor")
                        .WithMany()
                        .HasForeignKey("ShopperProductColorId");

                    b.Navigation("Order");

                    b.Navigation("ShopperProductColor");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.UserDiscountCode", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.Discount", "Discount")
                        .WithMany("UserDiscountCodes")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("UserDiscountCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.UserInvite", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("UserInvites")
                        .HasForeignKey("InviterUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Wallet", b =>
                {
                    b.HasOne("Reshop.Domain.Entities.User.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshop.Domain.Entities.User.WalletType", "WalletType")
                        .WithMany("Wallets")
                        .HasForeignKey("WalletTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Category.Category", b =>
                {
                    b.Navigation("CategoryGalleries");

                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Category.ChildCategory", b =>
                {
                    b.Navigation("BrandToChildCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Comment.Comment", b =>
                {
                    b.Navigation("CommentFeedBacks");

                    b.Navigation("ReportComments");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Image.ImagePlace", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Permission.Permission", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Permission.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Brand", b =>
                {
                    b.Navigation("BrandToChildCategories");

                    b.Navigation("OfficialBrandProducts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.OfficialBrandProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Options.Chipset", b =>
                {
                    b.Navigation("Cpus");

                    b.Navigation("Gpus");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Options.OperatingSystem", b =>
                {
                    b.Navigation("OperatingSystemVersions");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Product.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ProductGalleries");

                    b.Navigation("Questions");

                    b.Navigation("ShopperProducts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.Question", b =>
                {
                    b.Navigation("QuestionAnswers");

                    b.Navigation("QuestionLikes");

                    b.Navigation("QuestionReports");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Question.QuestionAnswer", b =>
                {
                    b.Navigation("QuestionAnswerLikes");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.Shopper", b =>
                {
                    b.Navigation("ShopperProductRequests");

                    b.Navigation("ShopperProducts");

                    b.Navigation("ShopperTitles");

                    b.Navigation("StoresAddress");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProduct", b =>
                {
                    b.Navigation("ShopperProductColors");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.ShopperProductColor", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.Shopper.StoreTitle", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("ShopperTitles");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Discount", b =>
                {
                    b.Navigation("UserDiscountCodes");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CommentFeedBacks");

                    b.Navigation("Comments");

                    b.Navigation("FavoriteProducts");

                    b.Navigation("Orders");

                    b.Navigation("QuestionAnswerLikes");

                    b.Navigation("QuestionAnswerReports");

                    b.Navigation("QuestionAnswers");

                    b.Navigation("QuestionLikes");

                    b.Navigation("QuestionReports");

                    b.Navigation("Questions");

                    b.Navigation("ReportComments");

                    b.Navigation("UserDiscountCodes");

                    b.Navigation("UserInvites");

                    b.Navigation("UserRoles");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Reshop.Domain.Entities.User.WalletType", b =>
                {
                    b.Navigation("Wallets");
                });
#pragma warning restore 612, 618
        }
    }
}
